import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/CommunityPage.css';

function CommunityPage() {
    const navigate = useNavigate();
    const [posts, setPosts] = useState([
        {
            id: 1,
            title: 'Í∞ïÎÇ®Íµ¨ ÍµêÌÜµ ÏÉÅÌô© Î¨∏Ïùò',
            content: 'Í∞ïÎÇ®Íµ¨ ÏùºÎåÄ ÍµêÌÜµ Ï†ïÏ≤¥Í∞Ä Ïã¨ÌïúÎç∞ Í∞úÏÑ† Î∞©ÏïàÏù¥ ÏûàÏùÑÍπåÏöî?',
            author: 'ÏãúÎØº1234',
            time: '2Î∂Ñ Ï†Ñ',
            likes: 15,
            comments: 3,
            category: 'ÍµêÌÜµ',
            location: 'Í∞ïÎÇ®Íµ¨ Ïó≠ÏÇºÎèô',
        },
        {
            id: 2,
            title: 'ÎèÑÎ°ú ÌååÏÜê Ïã†Í≥†Ìï©ÎãàÎã§',
            content: 'ÏÑúÏ¥àÍµ¨ ÏùºÎåÄ ÎèÑÎ°úÏóê ÌÅ∞ Íµ¨Î©çÏù¥ ÏÉùÍ≤ºÎäîÎç∞ Îπ†Î•∏ ÏàòÎ¶¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.',
            author: 'ÏïàÏ†ÑÏßÄÌÇ¥Ïù¥',
            time: '15Î∂Ñ Ï†Ñ',
            likes: 28,
            comments: 7,
            category: 'ÎØºÏõê',
            location: 'ÏÑúÏ¥àÍµ¨ ÏÑúÏ¥àÎèô',
        },
        {
            id: 3,
            title: 'ÏÑúÏö∏Ïãú Í≥µÏõê Ï†ïÎ≥¥ Í≥µÏú†',
            content: 'Í∞ÄÏ°±Í≥º Ìï®Íªò Í∞à Ïàò ÏûàÎäî Ï¢ãÏùÄ Í≥µÏõê Ï†ïÎ≥¥Î•º Í≥µÏú†Ìï©ÎãàÎã§.',
            author: 'Í≥µÏõêÎü¨Î≤Ñ',
            time: '1ÏãúÍ∞Ñ Ï†Ñ',
            likes: 23,
            comments: 12,
            category: 'ÏßÄÏó≠Ï†ïÎ≥¥',
            location: 'ÌïúÍ∞ïÍ≥µÏõê ÏùºÎåÄ',
        },
    ]);

    const [newPost, setNewPost] = useState({
        title: '',
        content: '',
        category: 'ÍµêÌÜµ',
        location: '',
        locationType: 'current', // 'current' or 'search'
    });

    const [showPostForm, setShowPostForm] = useState(false);
    const [sortBy, setSortBy] = useState('latest'); // 'latest' or 'likes'
    const [activeCategory, setActiveCategory] = useState('Ï†ÑÏ≤¥');

    const handleBack = () => {
        navigate('/');
    };

    const handleLocationTypeChange = (type) => {
        if (type === 'current') {
            setNewPost({ ...newPost, locationType: type, location: 'ÌòÑÏû¨ ÏúÑÏπò' });
        } else {
            setNewPost({ ...newPost, locationType: type, location: '' });
        }
    };

    const handleSubmitPost = (e) => {
        e.preventDefault();
        if (newPost.title && newPost.content && newPost.location) {
            const post = {
                id: posts.length + 1,
                title: newPost.title,
                content: newPost.content,
                author: 'ÏÉàÎ°úÏö¥ÏÇ¨Ïö©Ïûê',
                time: 'Î∞©Í∏à Ï†Ñ',
                likes: 0,
                comments: 0,
                category: newPost.category,
                location: newPost.location,
            };
            setPosts([post, ...posts]);
            setNewPost({ title: '', content: '', category: 'ÍµêÌÜµ', location: '', locationType: 'current' });
            setShowPostForm(false);
        }
    };

    // Í≤åÏãúÎ¨º Ï†ïÎ†¨ Î∞è ÌïÑÌÑ∞ÎßÅ Ìï®Ïàò
    const getSortedAndFilteredPosts = () => {
        let filteredPosts = posts;

        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ÎßÅ
        if (activeCategory !== 'Ï†ÑÏ≤¥') {
            filteredPosts = posts.filter((post) => post.category === activeCategory);
        }

        // Ï†ïÎ†¨
        if (sortBy === 'latest') {
            // ÏµúÏã†Ïàú Ï†ïÎ†¨ (ÏãúÍ∞Ñ Í∏∞Ï§Ä)
            filteredPosts.sort((a, b) => {
                const timeValues = {
                    'Î∞©Í∏à Ï†Ñ': 0,
                    '2Î∂Ñ Ï†Ñ': 2,
                    '15Î∂Ñ Ï†Ñ': 15,
                    '1ÏãúÍ∞Ñ Ï†Ñ': 60,
                };
                return (timeValues[a.time] || 0) - (timeValues[b.time] || 0);
            });
        } else if (sortBy === 'likes') {
            // Ï¢ãÏïÑÏöîÏàú Ï†ïÎ†¨
            filteredPosts.sort((a, b) => b.likes - a.likes);
        }

        return filteredPosts;
    };

    return (
        <div className="community-page">
            {/* Header */}
            <header className="community-header">
                <div className="header-left">
                    <button className="back-btn" onClick={handleBack}>
                        ‚Üê ÎèåÏïÑÍ∞ÄÍ∏∞
                    </button>
                    <h1 className="page-title">Seoul AI Ïª§ÎÆ§ÎãàÌã∞</h1>
                </div>
                <button className="new-post-btn" onClick={() => setShowPostForm(true)}>
                    + ÏÉà Í∏Ä ÏûëÏÑ±
                </button>
            </header>

            <div className="community-content">
                {/* Statistics Section */}
                <div className="community-stats-section">
                    <div className="stat-card">
                        <span className="stat-number">152</span>
                        <span className="stat-label">Ï†ÑÏ≤¥ Í≤åÏãúÎ¨º</span>
                    </div>
                    <div className="stat-card">
                        <span className="stat-number">47</span>
                        <span className="stat-label">ÌôúÏÑ± ÏÇ¨Ïö©Ïûê</span>
                    </div>
                    <div className="stat-card">
                        <span className="stat-number">23</span>
                        <span className="stat-label">Ïò§Îäò ÏûëÏÑ±</span>
                    </div>
                </div>

                {/* Post Form Modal */}
                {showPostForm && (
                    <div className="post-form-overlay">
                        <div className="post-form-modal">
                            <div className="modal-header">
                                <h3>ÏÉà Í∏Ä ÏûëÏÑ±</h3>
                                <button className="close-btn" onClick={() => setShowPostForm(false)}>
                                    √ó
                                </button>
                            </div>
                            <form onSubmit={handleSubmitPost}>
                                <div className="form-group">
                                    <label>Ïπ¥ÌÖåÍ≥†Î¶¨</label>
                                    <select
                                        value={newPost.category}
                                        onChange={(e) => setNewPost({ ...newPost, category: e.target.value })}
                                    >
                                        <option value="ÍµêÌÜµ">ÍµêÌÜµ</option>
                                        <option value="ÎØºÏõê">ÎØºÏõê</option>
                                        <option value="ÏßÄÏó≠Ï†ïÎ≥¥">ÏßÄÏó≠Ï†ïÎ≥¥</option>
                                    </select>
                                </div>
                                <div className="form-group">
                                    <label>Ï†úÎ™©</label>
                                    <input
                                        type="text"
                                        value={newPost.title}
                                        onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}
                                        placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>ÎÇ¥Ïö©</label>
                                    <textarea
                                        value={newPost.content}
                                        onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}
                                        placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                        rows="5"
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>ÏúÑÏπò</label>
                                    <div className="location-selector">
                                        <div className="location-type-buttons">
                                            <button
                                                type="button"
                                                className={`location-type-btn ${
                                                    newPost.locationType === 'current' ? 'active' : ''
                                                }`}
                                                onClick={() => handleLocationTypeChange('current')}
                                            >
                                                üìç ÌòÑÏû¨ÏúÑÏπò
                                            </button>
                                            <button
                                                type="button"
                                                className={`location-type-btn ${
                                                    newPost.locationType === 'search' ? 'active' : ''
                                                }`}
                                                onClick={() => handleLocationTypeChange('search')}
                                            >
                                                üîç Ï∞æÍ∏∞
                                            </button>
                                        </div>
                                        {newPost.locationType === 'search' && (
                                            <input
                                                type="text"
                                                value={newPost.location}
                                                onChange={(e) => setNewPost({ ...newPost, location: e.target.value })}
                                                placeholder="ÏúÑÏπòÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: Í∞ïÎÇ®Íµ¨ Ïó≠ÏÇºÎèô)"
                                                required
                                            />
                                        )}
                                        {newPost.locationType === 'current' && (
                                            <div className="current-location">
                                                <span>üìç ÌòÑÏû¨ ÏúÑÏπò</span>
                                            </div>
                                        )}
                                    </div>
                                </div>
                                <div className="form-actions">
                                    <button type="button" onClick={() => setShowPostForm(false)}>
                                        Ï∑®ÏÜå
                                    </button>
                                    <button type="submit">ÏûëÏÑ±ÌïòÍ∏∞</button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}

                {/* Posts List */}
                <div className="posts-section">
                    <div className="section-header">
                        <h2>ÏµúÍ∑º Í≤åÏãúÎ¨º</h2>
                        <div className="header-controls">
                            <div className="sort-controls">
                                <button
                                    className={`sort-btn ${sortBy === 'latest' ? 'active' : ''}`}
                                    onClick={() => setSortBy('latest')}
                                >
                                    ÏµúÏã†Ïàú
                                </button>
                                <button
                                    className={`sort-btn ${sortBy === 'likes' ? 'active' : ''}`}
                                    onClick={() => setSortBy('likes')}
                                >
                                    Ï¢ãÏïÑÏöîÏàú
                                </button>
                            </div>
                            <div className="filter-tabs">
                                <button
                                    className={`tab ${activeCategory === 'Ï†ÑÏ≤¥' ? 'active' : ''}`}
                                    onClick={() => setActiveCategory('Ï†ÑÏ≤¥')}
                                >
                                    Ï†ÑÏ≤¥
                                </button>
                                <button
                                    className={`tab ${activeCategory === 'ÍµêÌÜµ' ? 'active' : ''}`}
                                    onClick={() => setActiveCategory('ÍµêÌÜµ')}
                                >
                                    ÍµêÌÜµ
                                </button>
                                <button
                                    className={`tab ${activeCategory === 'ÎØºÏõê' ? 'active' : ''}`}
                                    onClick={() => setActiveCategory('ÎØºÏõê')}
                                >
                                    ÎØºÏõê
                                </button>
                                <button
                                    className={`tab ${activeCategory === 'ÏßÄÏó≠Ï†ïÎ≥¥' ? 'active' : ''}`}
                                    onClick={() => setActiveCategory('ÏßÄÏó≠Ï†ïÎ≥¥')}
                                >
                                    ÏßÄÏó≠Ï†ïÎ≥¥
                                </button>
                            </div>
                        </div>
                    </div>

                    <div className="posts-list">
                        {getSortedAndFilteredPosts().map((post) => (
                            <div key={post.id} className="post-card">
                                <div className="post-header">
                                    <span className={`category-tag ${post.category}`}>{post.category}</span>
                                    <span className="post-time">{post.time}</span>
                                </div>
                                <h3 className="post-title">{post.title}</h3>
                                <p className="post-content">{post.content}</p>
                                <div className="post-location">üìç {post.location}</div>
                                <div className="post-footer">
                                    <div className="post-author">
                                        <span className="author-icon">üë§</span>
                                        <span className="author-name">{post.author}</span>
                                    </div>
                                    <div className="post-actions">
                                        <button className="action-btn">üëç {post.likes}</button>
                                        <button className="action-btn">üí¨ {post.comments}</button>
                                        <button className="action-btn">üì§ Í≥µÏú†</button>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
}

export default CommunityPage;
